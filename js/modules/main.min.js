async function loadTypesColors(){typeColors=await loadJson("data/pokemon_types_with_colors.json"),typeColors||console.error("Fail to load type Colors")}async function generateContent(e){const t=el("#poke-grid");t.innerHTML="",el("#loader").classList.remove("is-hidden");let n="";for(const t of e){const e=t.id,i=await isPokemonStored(e);let o="normal";if(t.typeUrl){const s=await loadJson(t.typeUrl);o=s.types[0].type.name;const a=typeColors[o]||"#A8A77A";t.color=a,n+=`\n        <div class="cell float-box">\n          <div class="box grid is-justify-items-center is-poke-background is-relative">\n            <div id="poke-card-${e}" class="overlay z-0" style="background-color: ${a};"></div>\n            <div id="like-${e}" class="like like-box is-clickable" data-liked="${i?"true":"false"}">\n              <span class="icon">\n                <svg\n                  class="like-icon ${i?"liked":""}" // Solo se asigna 'liked' si está en IndexedDB\n                  xmlns="http://www.w3.org/2000/svg"\n                  viewBox="0 0 24 24"\n                >\n                  <path\n                    d="M12,21.35L10.55,20.03C5.4,15.36 2,12.27 2,8.5C2,5.41 4.42,3 7.5,3C9.24,3 10.91,3.81 12,5.08C13.09,3.81 14.76,3 16.5,3C19.58,3 22,5.41 22,8.5C22,12.27 18.6,15.36 13.45,20.03L12,21.35Z"\n                  />\n                </svg>\n              </span>\n            </div>\n            <figure class="image is-128x128">\n              <img src="${t.imageUrl}" />\n            </figure>\n            <div class="content">\n              <p class="is-size-5 has-text-centered is-capitalized is-relative z-0 ">\n                <strong class="is-family-secondary">${t.name}</strong>\n              </p>\n              <div class="buttons">\n                <a onclick="viewDetails(${e})" class="button is-primary">\n                  <strong> Mehr Info </strong>\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      `}}t.innerHTML=n,e.forEach(e=>{const t=e.id,n=el(`#like-${t}`);n&&n.addEventListener("click",t=>likeButton(t,e))}),setTimeout(()=>{el("#loader").classList.add("is-hidden")},1e3)}function viewDetails(e){window.location.href=`single.html?id=${e}`}function createPagination(){const e=el("#pagination");if(e.innerHTML="",currentPage>1){const t=create("button");t.textContent="Previous page",t.classList.add("button"),t.addEventListener("click",()=>{currentPage--,getPokemonList(currentPage)}),e.appendChild(t)}const t=create("button");t.textContent="Next page",t.classList.add("button"),t.addEventListener("click",()=>{currentPage++,getPokemonList(currentPage)}),e.appendChild(t)}async function likeButton(e,t){const n=e.currentTarget,i=n.querySelector(".like-icon"),o="true"===n.getAttribute("data-liked");n.setAttribute("data-liked",!o);await db.readKeys();if(i.classList.toggle("liked"),o)db.deleteItem(t.id),t.name,t.id,getListButton();else{const e={id:t.id,name:t.name,imageUrl:t.imageUrl,bgColor:t.color};try{await db.writeItem(t.id,e),t.name,t.id,getListButton()}catch(e){}}}async function isPokemonStored(e){try{const t=await db.readKeys();return t.includes(String(e))}catch(t){return console.error(`Error checking if Pokémon ${e} is stored:`,t),!1}}import{loadJson,el,create}from"./lib.js";import{db}from"./db.js";import{getListButton}from"./menu.js";let currentPage=1;const limit=12;let typeColors={};export async function init(){await loadTypesColors(),await getPokemonList(),await getListButton()}export async function getPokemonList(e=1){currentPage=e;const t=(currentPage-1)*limit,n=`https://pokeapi.co/api/v2/pokemon/?limit=${limit}&offset=${t}`,i=await loadJson(n);if(!i)return void console.error("load Error");const o=i.results.map(e=>{const t=e.url.split("/")[6];return{...e,id:t,imageUrl:`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/${t}.svg`,typeUrl:`https://pokeapi.co/api/v2/pokemon/${t}/`}});generateContent(o),createPagination()}window.viewDetails=viewDetails;